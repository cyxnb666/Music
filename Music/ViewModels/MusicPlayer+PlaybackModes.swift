//
//  MusicPlayer+PlaybackModes.swift
//  Music
//
//  Created by Yaoxi Chen on 2025/5/24.
//

import Foundation

// MARK: - Êí≠ÊîæÊ®°ÂºèÁÆ°ÁêÜÊâ©Â±ï
extension MusicPlayer {
    
    // MARK: - Êí≠ÊîæÊ®°ÂºèÂàáÊç¢
    func togglePlaybackMode() {
        switch playbackMode {
        case .sequence:
            playbackMode = .shuffle
            if !playlist.isEmpty {
                shufflePlaylist()
            }
            print("üîÄ ÂàáÊç¢Âà∞ÈöèÊú∫Êí≠ÊîæÊ®°Âºè")
        case .shuffle:
            playbackMode = .sequence
            restoreOriginalOrder()
            print("üìã ÂàáÊç¢Âà∞È°∫Â∫èÊí≠ÊîæÊ®°Âºè")
        }
    }
    
    // MARK: - ÈáçÂ§çÊ®°ÂºèÂàáÊç¢
    func toggleRepeatMode() {
        switch repeatMode {
        case .off:
            repeatMode = .all
            print("üîÅ ÂàáÊç¢Âà∞ÈáçÂ§çÂàóË°®Ê®°Âºè")
        case .all:
            repeatMode = .one
            print("üîÇ ÂàáÊç¢Âà∞ÂçïÊõ≤Âæ™ÁéØÊ®°Âºè")
        case .one:
            repeatMode = .off
            print("‚èπÔ∏è ÂÖ≥Èó≠ÈáçÂ§çÊí≠Êîæ")
        }
    }
    
    // MARK: - ‰∏ä‰∏ÄÈ¶ñ
    func previousTrack() {
        guard !playlist.isEmpty else {
            seekTo(time: 0)
            return
        }
        
        // Â¶ÇÊûúÂΩìÂâçÊí≠ÊîæÊó∂Èó¥Ë∂ÖËøá3ÁßíÔºåÂÖàË∑≥Âà∞Ê≠åÊõ≤ÂºÄÂ§¥
        if currentTime > 3.0 {
            seekTo(time: 0)
            return
        }
        
        let shouldContinuePlayingAfterLoad = isPlaying
        
        switch playbackMode {
        case .sequence:
            if currentIndex > 0 {
                currentIndex -= 1
            } else if repeatMode == .all {
                currentIndex = playlist.count - 1
            } else {
                seekTo(time: 0)
                pause()
                return
            }
            
        case .shuffle:
            if currentShuffleIndex > 0 {
                currentShuffleIndex -= 1
            } else if repeatMode == .all {
                currentShuffleIndex = shuffledIndices.count - 1
            } else {
                seekTo(time: 0)
                pause()
                return
            }
        }
        
        let song = playbackMode == .shuffle ?
            originalPlaylist[shuffledIndices[currentShuffleIndex]] :
            playlist[currentIndex]
        loadSong(song)
        
        if shouldContinuePlayingAfterLoad {
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                self.play()
            }
        }
    }
    
    // MARK: - ‰∏ã‰∏ÄÈ¶ñ
    func nextTrack() {
        guard !playlist.isEmpty else {
            seekTo(time: duration)
            return
        }
        
        // ÂçïÊõ≤Âæ™ÁéØÊ®°Âºè
        if repeatMode == .one {
            seekTo(time: 0)
            let shouldContinuePlayingAfterSeek = isPlaying
            if shouldContinuePlayingAfterSeek {
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                    self.play()
                }
            }
            return
        }
        
        let shouldContinuePlayingAfterLoad = isPlaying
        
        switch playbackMode {
        case .sequence:
            if currentIndex < playlist.count - 1 {
                currentIndex += 1
            } else if repeatMode == .all {
                currentIndex = 0
            } else {
                pause()
                return
            }
            
        case .shuffle:
            if currentShuffleIndex < shuffledIndices.count - 1 {
                currentShuffleIndex += 1
            } else if repeatMode == .all {
                shufflePlaylist()
                currentShuffleIndex = 0
            } else {
                pause()
                return
            }
        }
        
        let song = playbackMode == .shuffle ?
            originalPlaylist[shuffledIndices[currentShuffleIndex]] :
            playlist[currentIndex]
        loadSong(song)
        
        if shouldContinuePlayingAfterLoad {
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                self.play()
            }
        }
    }
}
